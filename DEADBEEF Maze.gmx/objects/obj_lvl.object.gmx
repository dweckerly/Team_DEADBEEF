<!--This Document is generated by GameMaker, if you edit it by hand then you do so at your own risk!-->
<object>
  <spriteName>&lt;undefined&gt;</spriteName>
  <solid>0</solid>
  <visible>-1</visible>
  <depth>-1</depth>
  <persistent>0</persistent>
  <parentName>&lt;undefined&gt;</parentName>
  <maskName>&lt;undefined&gt;</maskName>
  <events>
    <event eventtype="0" enumb="0">
      <action>
        <libid>1</libid>
        <id>603</id>
        <kind>7</kind>
        <userelative>0</userelative>
        <isquestion>0</isquestion>
        <useapplyto>-1</useapplyto>
        <exetype>2</exetype>
        <functionname></functionname>
        <codestring></codestring>
        <whoName>self</whoName>
        <relative>0</relative>
        <isnot>0</isnot>
        <arguments>
          <argument>
            <kind>1</kind>
            <string>///Create level

global.logfile = file_text_open_write("logs/Log_"+ string(current_month) + "-" + string(current_day) + "-" + string(current_year) + "_" + string(current_hour) + "-" + string(current_minute) + "-" + string(current_second) + '.txt');

found_floor = false;

//stesp to check for object proximity
var steps = 4;

//resize the room
room_width = (CELL_WIDTH/16) * 360;
room_height = 1024;             //hard value set for height due to surface not 
                                //rendering correctly beyond this number
//set grid width and height
var width = room_width div CELL_WIDTH;      //div returns whole number
var height = room_height div CELL_HEIGHT;

//create grid
grid = ds_grid_create(width, height);

//create path for enemy pathfinding
//grid_path = mp_grid_create(0, 0, width, height, CELL_WIDTH, CELL_HEIGHT);

//fill the grid with void
ds_grid_set_region(grid, 0, 0, (width - 1), (height - 1), VOID);

//Random gen
randomize();

var cx = width div 2;
var cy = height div 2;

//create player
instance_create(cx * CELL_WIDTH + CELL_WIDTH/2, cy * CELL_HEIGHT+CELL_HEIGHT/2, obj_player);

//give the controller a random direction
var cdir = irandom(3);

//odds for variable changing direction
var odds = 1;

//creat level using 500 steps
repeat (500){
    //place floor tile at controller position
    grid[# cx, cy] = FLOOR;         //accessor
    
    //randomize direction of the controller
    if(irandom(odds) == odds){
        cdir = irandom(3);
    }
    //move controller every step to place floor somewhere else
    var xdir = lengthdir_x(1, (cdir * 90));     //multiplied by 90 to rpelicate circle angles
    var ydir = lengthdir_y(1, (cdir * 90));
    
    var neighbor = check_for_neighbor(grid, cx, cy, xdir, ydir);
    
    while(neighbor){
        cdir = irandom(3);
        var xdir = lengthdir_x(1, (cdir * 90));     
        var ydir = lengthdir_y(1, (cdir * 90));
        var neighbor = check_for_neighbor(grid, cx, cy, xdir, ydir);
    }
    
    cx += xdir;
    cy += ydir;
    
    //constrain movement to inside the grid
    cx = clamp(cx, 1, (width - 2));   //subtract 2 for 1 pixel border around edge
    cy = clamp(cy, 1, (height - 2));
}

for(var yy = 1; yy &lt; height - 1; yy++){
    for(var xx = 1; xx &lt; width - 1; xx++){
        //surround floor tiles with walls
        if(grid[# xx, yy] == FLOOR){
            //check to the right
            if(grid[# xx + 1, yy] != FLOOR){
                grid[# xx + 1, yy] = WALL;
            }
            //check to the left
            if(grid[# xx - 1, yy] != FLOOR){
                grid[# xx - 1, yy] = WALL;
            }
            //check below
            if(grid[# xx, yy + 1] != FLOOR){
                grid[# xx, yy + 1] = WALL;
            }
            //check above
            if(grid[# xx, yy - 1] != FLOOR){
                grid[# xx, yy - 1] = WALL;
            }
        }
    }
}

//draw tiles
for(var yy = 0; yy &lt; height; yy++){
    for(var xx = 0; xx &lt; width; xx++){
        //draw floor
        if(grid[# xx, yy] == FLOOR){
            tile_add(bg_floor, 0, 0, CELL_WIDTH, CELL_HEIGHT, xx * CELL_WIDTH, yy * CELL_HEIGHT, 0);
        }    
        //draw wall
        if(grid[# xx, yy] == WALL){
            //mp_grid_add_cell(grid_path, xx, yy);
            tile_add(bg_wall, 0, 0, CELL_WIDTH, CELL_HEIGHT, xx * CELL_WIDTH, yy * CELL_HEIGHT, 0);
        }  
    }
}

//create the shadow and light around the player
instance_create(width, height, obj_lighting);

//create key, chest, door, and numbers
randomly_place_object(grid, obj_key, FLOOR);
randomly_place_object(grid, obj_chest, FLOOR);

randomly_place_object(grid, obj_enemy_rand, FLOOR);
while(check_proximity(obj_player, obj_enemy_rand, steps)){
    randomly_place_object(grid, obj_enemy_rand, FLOOR);   
}

randomly_place_object(grid, obj_smart_enemy, FLOOR);
while(check_proximity(obj_player, obj_smart_enemy, steps)){
    randomly_place_object(grid, obj_smart_enemy, FLOOR);   
}


randomly_place_object(grid, obj_door, WALL);

randomly_place_object(grid, obj_numbers, WALL);
randomly_place_object(grid, obj_numbers, WALL);
randomly_place_object(grid, obj_numbers, WALL);

debug_log("Room successfully created!");
</string>
          </argument>
        </arguments>
      </action>
    </event>
    <event eventtype="9" enumb="18">
      <action>
        <libid>1</libid>
        <id>603</id>
        <kind>7</kind>
        <userelative>0</userelative>
        <isquestion>0</isquestion>
        <useapplyto>-1</useapplyto>
        <exetype>2</exetype>
        <functionname></functionname>
        <codestring></codestring>
        <whoName>self</whoName>
        <relative>0</relative>
        <isnot>0</isnot>
        <arguments>
          <argument>
            <kind>1</kind>
            <string>ds_grid_destroy(grid);
//mp_grid_destroy(grid_path);
room_restart();
</string>
          </argument>
        </arguments>
      </action>
    </event>
  </events>
  <PhysicsObject>0</PhysicsObject>
  <PhysicsObjectSensor>0</PhysicsObjectSensor>
  <PhysicsObjectShape>0</PhysicsObjectShape>
  <PhysicsObjectDensity>0.5</PhysicsObjectDensity>
  <PhysicsObjectRestitution>0.100000001490116</PhysicsObjectRestitution>
  <PhysicsObjectGroup>0</PhysicsObjectGroup>
  <PhysicsObjectLinearDamping>0.100000001490116</PhysicsObjectLinearDamping>
  <PhysicsObjectAngularDamping>0.100000001490116</PhysicsObjectAngularDamping>
  <PhysicsObjectFriction>0.200000002980232</PhysicsObjectFriction>
  <PhysicsObjectAwake>-1</PhysicsObjectAwake>
  <PhysicsObjectKinematic>0</PhysicsObjectKinematic>
  <PhysicsShapePoints/>
</object>
