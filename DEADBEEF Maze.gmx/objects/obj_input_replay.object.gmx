<!--This Document is generated by GameMaker, if you edit it by hand then you do so at your own risk!-->
<object>
  <spriteName>&lt;undefined&gt;</spriteName>
  <solid>0</solid>
  <visible>-1</visible>
  <depth>-10</depth>
  <persistent>0</persistent>
  <parentName>&lt;undefined&gt;</parentName>
  <maskName>&lt;undefined&gt;</maskName>
  <events>
    <event eventtype="0" enumb="0">
      <action>
        <libid>1</libid>
        <id>603</id>
        <kind>7</kind>
        <userelative>0</userelative>
        <isquestion>0</isquestion>
        <useapplyto>-1</useapplyto>
        <exetype>2</exetype>
        <functionname></functionname>
        <codestring></codestring>
        <whoName>self</whoName>
        <relative>0</relative>
        <isnot>0</isnot>
        <arguments>
          <argument>
            <kind>1</kind>
            <string>txt = "";
enabled_keys = "ABCDEFGHIJKLMNOPQRSTUVWXYZ 1234567890";
blink = true;
blink_speed = 15;
alarm[0] = blink_speed;

x_max = 1024;
y_max = 728;

x_offset = 60;
y_bottom = 20;
y_top = 120;

cursor_offset = 24;

prompt = "&gt;";

x_txt = x_offset*3 - x_offset/2;
y_txt = (y_max - y_top + y_max - y_bottom)/2;

max_string_length = 17;

draw_set_halign(fa_left);
draw_set_valign(fa_center);

type = true;
error = false;
set_alarm = false;
</string>
          </argument>
        </arguments>
      </action>
    </event>
    <event eventtype="2" enumb="1">
      <action>
        <libid>1</libid>
        <id>603</id>
        <kind>7</kind>
        <userelative>0</userelative>
        <isquestion>0</isquestion>
        <useapplyto>-1</useapplyto>
        <exetype>2</exetype>
        <functionname></functionname>
        <codestring></codestring>
        <whoName>self</whoName>
        <relative>0</relative>
        <isnot>0</isnot>
        <arguments>
          <argument>
            <kind>1</kind>
            <string>error = false;
txt = "";
type = true;
</string>
          </argument>
        </arguments>
      </action>
    </event>
    <event eventtype="2" enumb="0">
      <action>
        <libid>1</libid>
        <id>603</id>
        <kind>7</kind>
        <userelative>0</userelative>
        <isquestion>0</isquestion>
        <useapplyto>-1</useapplyto>
        <exetype>2</exetype>
        <functionname></functionname>
        <codestring></codestring>
        <whoName>self</whoName>
        <relative>0</relative>
        <isnot>0</isnot>
        <arguments>
          <argument>
            <kind>1</kind>
            <string>blink = !blink;
alarm[0] = blink_speed;
</string>
          </argument>
        </arguments>
      </action>
    </event>
    <event eventtype="8" enumb="64">
      <action>
        <libid>1</libid>
        <id>603</id>
        <kind>7</kind>
        <userelative>0</userelative>
        <isquestion>0</isquestion>
        <useapplyto>-1</useapplyto>
        <exetype>2</exetype>
        <functionname></functionname>
        <codestring></codestring>
        <whoName>self</whoName>
        <relative>0</relative>
        <isnot>0</isnot>
        <arguments>
          <argument>
            <kind>1</kind>
            <string>///drawing text

shaky_color();
draw_roundrect(x_offset, 
                y_max - y_top,
                x_max - x_offset,  
                y_max - y_bottom, 
                true);
draw_set_font(fnt_term);
shaky_text(x_offset + string_width(prompt), 
            (y_max - y_top + y_max - y_bottom)/2, 
            prompt);
if(global.moving){
    draw_set_color(c_lime);
}
if(error){
    if(set_alarm){
        alarm[1] = room_speed;
        set_alarm = false;
    }
    draw_set_color(c_red);
    really_shaky_text(x_txt, y_txt, txt);
    type = false;
} else {
    draw_set_font(fnt_main);
    draw_text(x_txt, y_txt, txt);
}

    
if(blink){
    var length = string_width(txt);
    var height = string_height(enabled_keys);
    //draw_line(x_txt + length - length/2, y_txt - cursor_offset, x_txt + length - length/2, y_txt + height - cursor_offset);
    draw_line(x_txt + length, y_txt - cursor_offset, x_txt + length, y_txt + height - cursor_offset);
}
</string>
          </argument>
        </arguments>
      </action>
    </event>
    <event eventtype="9" enumb="13">
      <action>
        <libid>1</libid>
        <id>603</id>
        <kind>7</kind>
        <userelative>0</userelative>
        <isquestion>0</isquestion>
        <useapplyto>-1</useapplyto>
        <exetype>2</exetype>
        <functionname></functionname>
        <codestring></codestring>
        <whoName>self</whoName>
        <relative>0</relative>
        <isnot>0</isnot>
        <arguments>
          <argument>
            <kind>1</kind>
            <string>///receive input
replay_input(txt);
txt = "";
</string>
          </argument>
        </arguments>
      </action>
    </event>
    <event eventtype="9" enumb="1">
      <action>
        <libid>1</libid>
        <id>603</id>
        <kind>7</kind>
        <userelative>0</userelative>
        <isquestion>0</isquestion>
        <useapplyto>-1</useapplyto>
        <exetype>2</exetype>
        <functionname></functionname>
        <codestring></codestring>
        <whoName>self</whoName>
        <relative>0</relative>
        <isnot>0</isnot>
        <arguments>
          <argument>
            <kind>1</kind>
            <string>/*
if(global.moving){
    type = false;
} else {
    type = true;
}
*/
if(type){
    if(string_length(txt) &lt; max_string_length){
        if(string_count(chr(keyboard_key), enabled_keys) &amp;&amp; string_length(chr(keyboard_key)) == 1){
            blink = true;
            alarm[0] = blink_speed;
            switch(keyboard_lastchar){
                case "#" :
                    txt += "\#"
                    break;
                case vk_backspace:
                    txt = string_copy(txt, 0, string_length(txt) - 1);
                    break;
                default:
                    txt += keyboard_lastchar;
                    break;
            }
        }
    }
    if(keyboard_check_pressed(vk_backspace)){
        if(string_char_at(txt, string_length(txt)) == "#"){
           txt = string_copy(txt, 0, string_length(txt) - 2); 
        } else {  
            txt = string_copy(txt, 0, string_length(txt) - 1);
        }
    } 
}
</string>
          </argument>
        </arguments>
      </action>
    </event>
  </events>
  <PhysicsObject>0</PhysicsObject>
  <PhysicsObjectSensor>0</PhysicsObjectSensor>
  <PhysicsObjectShape>0</PhysicsObjectShape>
  <PhysicsObjectDensity>0.5</PhysicsObjectDensity>
  <PhysicsObjectRestitution>0.100000001490116</PhysicsObjectRestitution>
  <PhysicsObjectGroup>0</PhysicsObjectGroup>
  <PhysicsObjectLinearDamping>0.100000001490116</PhysicsObjectLinearDamping>
  <PhysicsObjectAngularDamping>0.100000001490116</PhysicsObjectAngularDamping>
  <PhysicsObjectFriction>0.200000002980232</PhysicsObjectFriction>
  <PhysicsObjectAwake>-1</PhysicsObjectAwake>
  <PhysicsObjectKinematic>0</PhysicsObjectKinematic>
  <PhysicsShapePoints/>
</object>
