<!--This Document is generated by GameMaker, if you edit it by hand then you do so at your own risk!-->
<object>
  <spriteName>spr_smart_enemy</spriteName>
  <solid>0</solid>
  <visible>-1</visible>
  <depth>-10</depth>
  <persistent>0</persistent>
  <parentName>&lt;undefined&gt;</parentName>
  <maskName>&lt;undefined&gt;</maskName>
  <events>
    <event eventtype="0" enumb="0">
      <action>
        <libid>1</libid>
        <id>603</id>
        <kind>7</kind>
        <userelative>0</userelative>
        <isquestion>0</isquestion>
        <useapplyto>-1</useapplyto>
        <exetype>2</exetype>
        <functionname></functionname>
        <codestring></codestring>
        <whoName>self</whoName>
        <relative>0</relative>
        <isnot>0</isnot>
        <arguments>
          <argument>
            <kind>1</kind>
            <string>//vars declared for pathfinding directional priority checking

priority_check_greedy = 0;
priority_check_aStar = 0;
priority_check_jump = 0;

set_alarm = true;

greedy_enabled = true;
astar_enabled = true;
jump_enabled = true;

disabled_count = 0;


</string>
          </argument>
        </arguments>
      </action>
    </event>
    <event eventtype="2" enumb="0">
      <action>
        <libid>1</libid>
        <id>603</id>
        <kind>7</kind>
        <userelative>0</userelative>
        <isquestion>0</isquestion>
        <useapplyto>-1</useapplyto>
        <exetype>2</exetype>
        <functionname></functionname>
        <codestring></codestring>
        <whoName>self</whoName>
        <relative>0</relative>
        <isnot>0</isnot>
        <arguments>
          <argument>
            <kind>1</kind>
            <string>set_alarm = true;

</string>
          </argument>
        </arguments>
      </action>
    </event>
    <event eventtype="3" enumb="0">
      <action>
        <libid>1</libid>
        <id>603</id>
        <kind>7</kind>
        <userelative>0</userelative>
        <isquestion>0</isquestion>
        <useapplyto>-1</useapplyto>
        <exetype>2</exetype>
        <functionname></functionname>
        <codestring></codestring>
        <whoName>self</whoName>
        <relative>0</relative>
        <isnot>0</isnot>
        <arguments>
          <argument>
            <kind>1</kind>
            <string>///set to move only if player is moving



if(global.moving){
    if(set_alarm){
        hspeed = 0;
        vspeed = 0;
        /*
        if(greedy_enabled){
            priority_check_greedy = greedy(obj_smart_enemy, obj_player, obj_lvl.grid);
        }
        if(astar_enabled){
            priority_check_aStar = aStar(obj_smart_enemy, obj_player, obj_lvl.grid);
        }
        if(jump_enabled){
            priority_check_jump = jump_to(obj_smart_enemy, obj_player, obj_lvl.grid);
        }
        
        if(priority_check_greedy == priority_check_aStar &amp;&amp; priority_check_aStar == priority_check_jump){
            enemy_move(obj_smart_enemy, priority_check_greedy);
        } else if(priority_check_greedy == priority_check_aStar &amp;&amp; priority_check_aStar != priority_check_jump){
            jump_enabled = false;
            disabled_count++;
            global.logfile = file_text_open_write("logs/Log_"+ string(current_month) + "-" + string(current_day) + "-" + string(current_year) + "_" + string(current_hour) + "-" + string(current_minute) + "-" + string(current_second) + '.txt');
            debug_log("" + string(current_month) + "-" + string(current_day) + "-" + string(current_year) + "_" + string(current_hour) + "-" + string(current_minute) + "-" + string(current_second)
                        + chr(13) + chr(10) + "Jump To pathfinding algorithm failed."
                        + chr(13) + chr(10) + "Disabling Jump To algorithm."
                        + chr(13) + chr(10) + "Checking other enabled algorithms.");
            enemy_move(obj_smart_enemy, priority_check_greedy);
        } else if(priority_check_aStar == priority_check_jump &amp;&amp; priority_check_greedy != priority_check_aStar){
            greedy_enabled = false;
            disabled_count++;
            global.logfile = file_text_open_write("logs/Log_"+ string(current_month) + "-" + string(current_day) + "-" + string(current_year) + "_" + string(current_hour) + "-" + string(current_minute) + "-" + string(current_second) + '.txt');
            debug_log("" + string(current_month) + "-" + string(current_day) + "-" + string(current_year) + "_" + string(current_hour) + "-" + string(current_minute) + "-" + string(current_second)
                        + chr(13) + chr(10) + "Greedy pathfinding algorithm failed."
                        + chr(13) + chr(10) + "Disabling Greedy algorithm."
                        + chr(13) + chr(10) + "Checking other enabled algorithms.");
            enemy_move(obj_smart_enemy, priority_check_aStar);
        } else if(priority_check_greedy == priority_check_jump &amp;&amp; priority_check_aStar != priority_check_jump){
            astar_enabled = false;
            disabled_count++;
            global.logfile = file_text_open_write("logs/Log_"+ string(current_month) + "-" + string(current_day) + "-" + string(current_year) + "_" + string(current_hour) + "-" + string(current_minute) + "-" + string(current_second) + '.txt');
            debug_log("" + string(current_month) + "-" + string(current_day) + "-" + string(current_year) + "_" + string(current_hour) + "-" + string(current_minute) + "-" + string(current_second)
                        + chr(13) + chr(10) + "A* pathfinding algorithm failed."
                        + chr(13) + chr(10) + "Disabling A* algorithm."
                        + chr(13) + chr(10) + "Checking other enabled algorithms.");
            enemy_move(obj_smart_enemy, priority_check_greedy);
        } else {
            disabled_count = 2;       
        }
        enemy_move(obj_smart_enemy, greedy(obj_smart_enemy, obj_player, obj_lvl.grid));
        
        */
        
        enemy_move(obj_smart_enemy, greedy(obj_smart_enemy, obj_player, obj_lvl.grid));
        alarm[0] = room_speed;
        set_alarm = false;
    } 
} else {
    hspeed = 0;
    vspeed = 0;
}

if(check_for_object(obj_smart_enemy, 32)){
    room_restart();
}

if(disabled_count &gt;= 2){
    instance_create(x, y, obj_smart_enemy);
    instance_destroy();
    global.logfile = file_text_open_write("logs/Log_"+ string(current_month) + "-" + string(current_day) + "-" + string(current_year) + "_" + string(current_hour) + "-" + string(current_minute) + "-" + string(current_second) + '.txt');
    debug_log("" + string(current_month) + "-" + string(current_day) + "-" + string(current_year) + "_" + string(current_hour) + "-" + string(current_minute) + "-" + string(current_second)
                        + chr(13) + chr(10) + "All pathfinding algorithms failed!"
                        + chr(13) + chr(10) + "Destroying current enemy instance."
                        + chr(13) + chr(10) + "Creating new enemy instance.");
}
</string>
          </argument>
        </arguments>
      </action>
    </event>
  </events>
  <PhysicsObject>0</PhysicsObject>
  <PhysicsObjectSensor>0</PhysicsObjectSensor>
  <PhysicsObjectShape>0</PhysicsObjectShape>
  <PhysicsObjectDensity>0.5</PhysicsObjectDensity>
  <PhysicsObjectRestitution>0.100000001490116</PhysicsObjectRestitution>
  <PhysicsObjectGroup>0</PhysicsObjectGroup>
  <PhysicsObjectLinearDamping>0.100000001490116</PhysicsObjectLinearDamping>
  <PhysicsObjectAngularDamping>0.100000001490116</PhysicsObjectAngularDamping>
  <PhysicsObjectFriction>0.200000002980232</PhysicsObjectFriction>
  <PhysicsObjectAwake>-1</PhysicsObjectAwake>
  <PhysicsObjectKinematic>0</PhysicsObjectKinematic>
  <PhysicsShapePoints/>
</object>
